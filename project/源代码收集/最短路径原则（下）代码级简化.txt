代码级简化
说得挺多了，最后再介绍一些写法上的简化方法吧：

正弦震动
实现一个元件的震动，物理方式模拟实现是最傻的，用Tween模拟多次缓动一样也好不到哪去。而震动指的都是正弦震动，所以我们用Math.sin()处理y轴就可以了。

你甚至不需要定义一个递增变量来处理时间，只需要在开始直接t = getTimer()来记录初始时间，然后像这样y = Math.sin((getTimer() - t) / T * 2 * Math.PI) * R（getTimer() - t得出的是经过的时间，T是震动周期，然后乘以2π，就是sin函数需要的参数，而再乘以振幅R即可，这都是中学知识）

停止用setTimeout执行一个函数即可，振幅一样可以用getTimer() - t作为变量递减。

九宫格方向
一般人物动画用的8方向序列帧，需要根据鼠标指示的方向来显示对应方向的循环序列，平常的做法就是写上一组九个的IF语句，分别判断九种情况并设置九种序列帧。这没有问题，但实际上有更简单的做法。我们可以认为x轴方向有3种状态（左，中，右），y轴方向有3种状态（上，中，下），而这些状态相互组合形成了结果的9种状态。如果这三种状态分别以数字0,1,2表示的话，可以用公式y*3+x直接得出一个状态值（y是纵向的状态，x是横向的状态），而这个结果则是这样的：

0（左上） 1（上） 2（右上）

3（左） 4（中） 5（右）

6（左下） 7（下） 8（右下）

这是一个9宫格，拉成一行就是一个数组，可以将各个方向的序列帧存在这个数组中，然后判断一次x的状态值，一次y的状态值，然后直接用arr[y*3+x]就能取出对应的序列帧，这比写上一组case或者if都要简短得多。

显示对象排序
最后是最标准的显示对象排序问题，只是单独排序一个物品并没什么技巧，从头到尾循环并比较就对了。但是如果是将一组混乱的数据按大小排列的话，不同排序方法的差异性就会体现出来。

有的人会用最简单的冒泡排序，但那个效率很不理想，所以有人就大张旗鼓地表示可以用分治（快速）排序来优化，但是分治排序写起来比较复杂，不少人都没背下来（包括我）

但实际上按时间复杂度来测试，Array.sort方法的结果看上去就很像分治排序。本来就是个系统函数，分治排序又没有缺点，应该用的就是这个，而且是原生方法速度也很快。但深度排序需要交换层，sort是个函数，其过程无法干预。

但只要使用参数Array.RETURNINDEXEDARRAY（记得也要用Array.NUMERIC指示按数字排序，否则中途会转换成字符串不仅错误而且慢），最终就会返回一个数组，下标是原位置，值是新位置，然后根据这个数组重新执行一遍setChildIndex就行了，显示对象序列也就和被排序的数组完成了同步。